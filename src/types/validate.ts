// Generated by ts-to-zod
import { z } from 'zod';

const globSchema = z.union([z.string(), z.array(z.string())]);

const rootConfigurationSchema = z.object({
  entryFiles: globSchema.optional(),
  projectFiles: globSchema.optional(),
  ignoreFiles: globSchema.optional(),
  ignoreBinaries: z.array(z.string()).optional(),
  ignoreWorkspaces: z.array(z.string()).optional(),
  paths: z.record(z.array(z.string())).optional(),
});

const reportConfigSchema = z.object({
  include: z.array(z.string()).optional(),
  exclude: z.array(z.string()).optional(),
});

const pluginWithEntryFilesSchema = z.union([
  globSchema,
  z.object({
    config: globSchema.optional(),
    entryFiles: globSchema.optional(),
    productionEntryFiles: globSchema.optional(),
    projectFiles: globSchema.optional(),
  }),
]);

const pluginWithSampleFilesSchema = z.union([
  globSchema,
  z.object({
    config: globSchema.optional(),
    entryFiles: globSchema.optional(),
    productionEntryFiles: globSchema.optional(),
    projectFiles: globSchema.optional(),
    sampleFiles: globSchema.optional(),
  }),
]);

const pluginsConfigurationSchema = z.object({
  babel: pluginWithEntryFilesSchema,
  capacitor: pluginWithEntryFilesSchema,
  changesets: pluginWithEntryFilesSchema,
  cypress: pluginWithEntryFilesSchema,
  eslint: pluginWithSampleFilesSchema,
  gatsby: pluginWithEntryFilesSchema,
  jest: pluginWithEntryFilesSchema,
  mocha: pluginWithEntryFilesSchema,
  next: pluginWithEntryFilesSchema,
  nx: pluginWithEntryFilesSchema,
  playwright: pluginWithEntryFilesSchema,
  postcss: pluginWithEntryFilesSchema,
  remark: pluginWithEntryFilesSchema,
  remix: pluginWithEntryFilesSchema,
  rollup: pluginWithEntryFilesSchema,
  storybook: pluginWithEntryFilesSchema,
  stryker: pluginWithEntryFilesSchema,
});

const baseWorkspaceConfigurationSchema = z.object({
  entryFiles: globSchema.optional(),
  projectFiles: globSchema.optional(),
  ignore: globSchema.optional(),
  paths: z.record(z.array(z.string())).optional(),
});

const workspaceConfigurationSchema = baseWorkspaceConfigurationSchema.merge(pluginsConfigurationSchema.partial());

const workspacesConfigurationSchema = z.object({
  workspaces: z.record(z.string(), workspaceConfigurationSchema).optional(),
});

export const LocalConfiguration = rootConfigurationSchema
  .merge(reportConfigSchema)
  .merge(workspacesConfigurationSchema)
  .merge(pluginsConfigurationSchema.partial());
